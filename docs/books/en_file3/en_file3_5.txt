resentations are assigned an integer key called the object shape.                     Starting a tree. Tree trees always start at loop headers, because
Thus, the guard is a simple equality check on the object shape.                    they are a natural place to look for hot paths. In TraceMonkey, loop
    Representation specialization: numbers. JavaScript has no                      headers are easy to detect–the bytecode compiler ensures that a
integer type, only a Number type that is the set of 64-bit IEEE-                   bytecode is a loop header iff it is the target of a backward branch.
754 ﬂoating-pointer numbers (“doubles”). But many JavaScript                       TraceMonkey starts a tree when a given loop header has been exe-
operators, in particular array accesses and bitwise operators, really              cuted a certain number of times (2 in the current implementation).
operate on integers, so they ﬁrst convert the number to an integer,                Starting a tree just means starting recording a trace for the current
and then convert any integer result back to a double.1 Clearly, a                  point and type map and marking the trace as the root of a tree. Each
JavaScript VM that wants to be fast must ﬁnd a way to operate on                   tree is associated with a loop header and type map, so there may be
integers directly and avoid these conversions.                                     several trees for a given loop header.
    In TraceMonkey, we support two representations for numbers:                       Closing the loop. Trace recording can end in several ways.
integers and doubles. The interpreter uses integer representations                    Ideally, the trace reaches the loop header where it started with
as much as it can, switching for results that can only be represented              the same type map as on entry. This is called a type-stable loop
as doubles. When a trace is started, some values may be imported                   iteration. In this case, the end of the trace can jump right to the
and represented as integers. Some operations on integers require                   beginning, as all the value representations are exactly as needed to
guards. For example, adding two integers can produce a value too                   enter the trace. The jump can even skip the usual code that would
large for the integer representation.                                              copy out the state at the end of the trace and copy it back in to the
    Function inlining. LIR traces can cross function boundaries                    trace activation record to enter a trace.
in either direction, achieving function inlining. Move instructions                   In certain cases the trace might reach the loop header with a
need to be recorded for function entry and exit to copy arguments                  different type map. This scenario is sometime observed for the ﬁrst
in and return values out. These move statements are then optimized                 iteration of a loop. Some variables inside the loop might initially be
away by the compiler using copy propagation. In order to be able                   undeﬁned, before they are set to a concrete type during the ﬁrst loop
to return to the interpreter, the trace must also generate LIR to                  iteration. When recording such an iteration, the recorder cannot
record that a call frame has been entered and exited. The frame                    link the trace back to its own loop header since it is type-unstable.
entry and exit LIR saves just enough information to allow the                      Instead, the iteration is terminated with a side exit that will always
intepreter call stack to be restored later and is much simpler than                fail and return to the interpreter. At the same time a new trace is
the interpreter’s standard call code. If the function being entered                recorded with the new type map. Every time an additional type-
is not constant (which in JavaScript includes any call by function                 unstable trace is added to a region, its exit type map is compared to
name), the recorder must also emit LIR to guard that the function                  the entry map of all existing traces in case they complement each
is the same.                                                                       other. With this approach we are able to cover type-unstable loop
    Guards and side exits. Each optimization described above                       iterations as long they eventually form a stable equilibrium.
requires one or more guards to verify the assumptions made in                         Finally, the trace might exit the loop before reaching the loop
doing the optimization. A guard is just a group of LIR instructions                header, for example because execution reaches a break or return
that performs a test and conditional exit. The exit branches to a                  statement. In this case, the VM simply ends the trace with an exit
side exit, a small off-trace piece of LIR that returns a pointer to                to the trace monitor.
a structure that describes the reason for the exit along with the                     As mentioned previously, we may speculatively chose to rep-
interpreter PC at the exit point and any other data needed to restore              resent certain Number-typed values as integers on trace. We do so
the interpreter’s state structures.                                                when we observe that Number-typed variables contain an integer
    Aborts. Some constructs are difﬁcult to record in LIR traces.                  value at trace entry. If during trace recording the variable is unex-
For example, eval or calls to external functions can change the                    pectedly assigned a non-integer value, we have to widen the type
program state in unpredictable ways, making it difﬁcult for the                    of the variable to a double. As a result, the recorded trace becomes
tracer to know the current type map in order to continue tracing.                  inherently type-unstable since it starts with an integer value but
A tracing implementation can also have any number of other limi-                   ends with a double value. This represents a mis-speculation, since
tations, e.g.,a small-memory device may limit the length of traces.                at trace entry we specialized the Number-typed value to an integer,
When any situation occurs that prevents the implementation from                    assuming that at the loop edge we would again ﬁnd an integer value
continuing trace recording, the implementation aborts trace record-                in the variable, allowing us to close the loop. To avoid future spec-
ing and returns to the trace monitor.                                              ulative failures involving this variable, and to obtain a type-stable
                                                                                   trace we note the fact that the variable in question as been observed
3.2  Trace Trees                                                                   to sometimes hold non-integer values in an advisory data structurewhich we call the “oracle”.
Especially simple loops, namely those where control ﬂow, value                        When compiling loops, we consult the oracle before specializ-
types, value representations, and inlined functions are all invariant,             ing values to integers. Speculation towards integers is performed
can be represented by a single trace. But most loops have at least                 only if no adverse information is known to the oracle about that
some variation, and so the program will take side exits from the                   particular variable. Whenever we accidentally compile a loop that
main trace. When a side exit becomes hot, TraceMonkey starts a                     is type-unstable due to mis-speculation of a Number-typed vari-
new branch trace from that point and patches the side exit to jump                 able, we immediately trigger the recording of a new trace, which
directly to that trace. In this way, a single trace expands on demand              based on the now updated oracle information will start with a dou-
to a single-entry, multiple-exit trace tree.                                       ble value and thus become type stable.
    This section explains how trace trees are formed during execu-                    Extending a tree. Side exits lead to different paths through
tion. The goal is to form trace trees during execution that cover all              the loop, or paths with different types or representations. Thus, to
the hot paths of the program.                                                      completely cover the loop, the VM must record traces starting at all
                                                                                   side exits. These traces are recorded much like root traces: there is
                                                                                   a counter for each side exit, and when the counter reaches a hotness
1 Arrays are actually worse than this: if the index value is a number, it must     threshold, recording starts. Recording stops exactly as for the root
be converted from a double to a string for the property access operator, and       trace, using the loop header of the root trace as the target to reach.
then to an integer internally to the array implementation.
